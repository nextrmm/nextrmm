// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  lastActivity DateTime @default(now())
  deviceInfo   Json?
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  isAdmin       Boolean        @default(false)
  accounts      Account[]
  sessions      Session[]
  organizations Organization[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

//Software manage
model Software {
  id      String   @id @default(uuid())
  type    String
  version String
  content Json     @default("{}") //{nameï¼š{maintainer:xxx,version:xxx,description:xxx}}
  device  Device[]

  @@index([type])
}

//System update
model SystemUpdate {
  id        String   @id @default(uuid())
  device    Device   @relation(fields: [deviceId], references: [id])
  deviceId  String   @unique
  content   Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([deviceId])
}

model SystemUpdatePolicy {
  id        String   @id @default(uuid())
  content   Json     @default("{}")
  device    Device[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//Agent
model Agent {
  id         String   @id @default(uuid())
  version    String
  lastSeen   DateTime
  os         System
  secret     String
  fileName   String
  autoUpdate Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  device     Device?

  @@index([os, autoUpdate])
}

//Device manage
enum Connection {
  Online
  Offline
}

enum System {
  Windows
  Linux
  MacOS
  Android
  IOS
  Other
}

enum DeviceType {
  Server
  Desktop
  Embeded
  Workstation
  Others
}

model Device {
  id                   String              @id @default(uuid())
  name                 String
  agent                Agent               @relation(fields: [agentId], references: [id])
  agentId              String              @unique
  type                 DeviceType
  os                   System
  osFullName           String
  conection            Connection
  remoteCode           Json
  health               Json
  software             Software?           @relation(fields: [softwareId], references: [id])
  softwareId           String?
  internalIp           String
  publicIp             String
  location             Location            @relation(fields: [locationId], references: [id])
  locationId           String              @unique
  systemUpdate         SystemUpdate?
  systemUpdatePolicy   SystemUpdatePolicy? @relation(fields: [systemUpdatePolicyId], references: [id])
  systemUpdatePolicyId String?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt

  @@index([name, type, agentId, locationId])
}

model Location {
  id             String       @id @default(uuid())
  name           String
  devices        Device[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String       @unique

  @@index([name])
}

model Organization {
  id        String     @id @default(uuid())
  name      String
  locations Location[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  manager   User       @relation(fields: [manageId], references: [id])
  manageId  String

  @@index([name])
}

//Task
model Task {
  id         String   @id @default(uuid())
  name       String
  cron       String
  duration   Int // Duration (in seconds)
  content    Json     @default("{\"script\":0}")
  result     Json     @default("{}")
  isTemplate Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([name, isTemplate])
  @@index([content(ops: JsonbPathOps)], type: Gin)
}

//Alert
model Alert {
  id         String   @id @default(uuid())
  name       String
  content    Json     @default("{}")
  isTemplate Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([name, isTemplate])
}

// Script
model Script {
  id              String   @id @default(uuid())
  name            String
  filename        String
  description     String
  type            String
  shell           String
  category        String[]
  supportPlatform String[]
  code            String
  codeBase64      String
  codeHash        String
  args            String[]
  envVars         String[]
  isHiddenRunning Boolean  @default(true)
  isTemplate      Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([name, type, codeHash, isHiddenRunning, isTemplate])
}

//Report
enum ReportType {
  Markdown
  Html
}

model Report {
  id         String     @id @default(uuid())
  type       ReportType
  name       String
  content    String
  isTemplate Boolean    @default(false)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@index([name, type, isTemplate])
}

//Log
enum LogType {
  Task
  UserAction
  Alert
}

model Log {
  id         String   @id @default(uuid())
  type       LogType
  name       String
  content    String
  isTemplate Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([name, type, isTemplate])
}

// Settings
model Settings {
  id               String   @id @default(uuid())
  announceSettings Json     @default("{\"SMTP\":0,\"WebHook\":0,\"SMS\":0}")
  aiSettings       Json     @default("{\"OpenAI\":0}")
  defaultTimeZone  String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([aiSettings(ops: JsonbPathOps), announceSettings(ops: JsonbPathOps)], type: Gin)
}
